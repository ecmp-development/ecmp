name: ECMP API Pipeline

on:
  push:
    branches:
      - main
      - feature/**
      - pipeline/**
      - testing/**
    paths:
      - ecmp-dev/**
      - .github/workflows/**
      - 'docker-compose.yml'
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java-kotlin
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'If you are using a "manual" build mode for one or more of the' \
            'languages you are analyzing, replace this with the commands to build' \
            'your code, for example:'
          echo '  make bootstrap'
          echo '  make release'
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  compile:
    environment: ecmp-dev-stage
    runs-on: ubuntu-latest
    name: compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Compile Project
        run: |
          cd ecmp-dev
          ./mvnw clean compile

  unit-tests:
    environment: ecmp-dev-stage
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update variables
        env:
          DB_USER: ${{ vars.POSTGRES_DB_USER }}
          DB_PASS: ${{ secrets.POSTGRES_DB_PASS }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
        run: |
          sed -i 's/<database_user>/${{ env.DB_USER }}/' ecmp-dev/src/main/resources/application.yml
          sed -i 's/<database_password>/${{ env.DB_PASS }}/' ecmp-dev/src/main/resources/application.yml
          sed -i 's/<jwt_key_signature>/${{ env.JWT_KEY }}/' ecmp-dev/src/main/resources/application.yml

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Running unit tests
        run: |
          cd ecmp-dev
          ./mvnw clean test

  build:
    environment: ecmp-dev-stage
    runs-on: ubuntu-latest
    name: build project
    needs: [compile, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update variables
        env:
          DB_USER: ${{ vars.POSTGRES_DB_USER }}
          DB_PASS: ${{ secrets.POSTGRES_DB_PASS }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
        run: |
          sed -i 's/<database_user>/${{ env.DB_USER }}/' ecmp-dev/src/main/resources/application.yml
          sed -i 's/<database_password>/${{ env.DB_PASS }}/' ecmp-dev/src/main/resources/application.yml
          sed -i 's/<jwt_key_signature>/${{ env.JWT_KEY }}/' ecmp-dev/src/main/resources/application.yml

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build project
        run: |
          cd ecmp-dev
          ./mvnw clean package

  build-image:
    environment: ecmp-dev-stage
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update variables
        env:
          DB_USER: ${{ vars.POSTGRES_DB_USER }}
          DB_PASS: ${{ secrets.POSTGRES_DB_PASS }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
        run: |
          sed -i 's/<database_user>/${{ env.DB_USER }}/' ecmp-dev/src/main/resources/application.yml
          sed -i 's/<database_password>/${{ env.DB_PASS }}/' ecmp-dev/src/main/resources/application.yml
          sed -i 's/<jwt_key_signature>/${{ env.JWT_KEY }}/' ecmp-dev/src/main/resources/application.yml

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build project
        run: |
          cd ecmp-dev
          ./mvnw clean package

      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push to Dockerhub
        uses: docker/build-push-action@v5
        with:
          context: ecmp-dev
          file: ecmp-dev/Dockerfile
          push: true
          platforms: |
            - linux/amd64
            - linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecmp-api:latest
